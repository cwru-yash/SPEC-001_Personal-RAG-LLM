# # version: '3.8'

# services:
#   # Database services
#   # duckdb:
#   #   image: duckdb/duckdb:latest
#   #   volumes:
#   #     - duckdb_data:/data
#   #   ports:
#   #     - "3000:3000"
#   duckdb-service:
#     image: python:3.11-slim
#     volumes:
#       - duckdb_data:/data
#     ports:
#       - "3000:3000"
#     command: >
#       bash -c "pip install duckdb fastapi uvicorn &&
#               python -c 'import duckdb; conn = duckdb.connect(\"/data/metadata.db\"); print(\"DuckDB initialized\")' &&
#               sleep infinity"

#   chroma:
#     image: ghcr.io/chroma-core/chroma:latest
#     volumes:
#       - chroma_data:/chroma/data
#     ports:
#       - "8000:8000"

#   neo4j:
#     image: neo4j:5.13.0
#     environment:
#       - NEO4J_AUTH=neo4j/password
#     volumes:
#       - neo4j_data:/data
#     ports:
#       - "7474:7474"  # HTTP
#       - "7687:7687"  # Bolt

#   # Application services
#   api:
#     build:
#       context: ../services/api
#       dockerfile: Dockerfile
#     depends_on:
#       - duckdb-service  # This was changed from 'duckdb' to 'duckdb-service'
#       - chroma
#       - neo4j
#     ports:
#       - "4000:4000"  # GraphQL API
#     volumes:
#       - ../conf:/app/conf

#   processor:
#     build:
#       context: ../services/processor
#       dockerfile: Dockerfile
#     depends_on:
#       - duckdb-service  # This was changed from 'duckdb' to 'duckdb-service'
#       - chroma
#       - neo4j
#     volumes:
#       - ../data:/app/data
#       - ../conf:/app/conf

#   llm:
#     build:
#       context: ../services/llm
#       dockerfile: Dockerfile
#     volumes:
#       - ../models:/app/models
#       - ../conf:/app/conf
#     ports:
#       - "5000:5000"  # LLM API

#   box-sync:
#     build:
#       context: ../services/box-sync
#       dockerfile: Dockerfile
#     volumes:
#       - ../data:/app/data
#       - ../conf:/app/conf

#   frontend:
#     build:
#       context: ../frontend
#       dockerfile: Dockerfile
#     ports:
#       - "8080:80"  # Web UI
#     depends_on:
#       - api

# volumes:
#   duckdb_data:
#   chroma_data:
#   neo4j_data:

# version: '3.8'

services:
  # Database services
  # duckdb-service:
  #   image: python:3.11-slim
  #   volumes:
  #     - duckdb_data:/data
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   command: >
  #     bash -c "pip install duckdb fastapi uvicorn &&
  #             python -c 'import duckdb; conn = duckdb.connect(\"/data/metadata.db\"); print(\"DuckDB initialized\")' &&
  #             uvicorn duckdb_service:app --host 0.0.0.0 --port 3000"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  duckdb-service:
    image: python:3.11-slim
    volumes:
      - duckdb_data:/data
    ports:
      - "3000:3000"
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      bash -c "pip install duckdb fastapi uvicorn &&
              mkdir -p /data &&
              python -c 'import duckdb; conn = duckdb.connect(\"/data/metadata.db\"); print(\"DuckDB initialized\")' &&
              sleep infinity"
    healthcheck:
      test: ["CMD", "echo", "DuckDB is healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   volumes:
  #     - chroma_data:/chroma/data
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - CHROMA_DB_IMPL=duckdb+parquet
  #     - CHROMA_PERSIST_DIRECTORY=/chroma/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   volumes:
  #     - chroma_data:/chroma/data
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - CHROMA_DB_IMPL=duckdb+parquet
  #     - CHROMA_PERSIST_DIRECTORY=/chroma/data
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   volumes:
  #     - chroma_data:/chroma/chroma_data
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - PERSIST_DIRECTORY=/chroma/chroma_data
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8000/api/v1/heartbeat || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 40s

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   volumes:
  #     - chroma_data:/chroma/chroma
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - PERSIST_DIRECTORY=/chroma/chroma
  #   command: "--host=0.0.0.0 --port=8000"
  #   healthcheck:
  #     disable: true

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   ports:
  #     - "8080:8000"  # Try a different port on host
  #   volumes:
  #     - ./data/chroma:/chroma/chroma_data
  #   environment:
  #     - ALLOW_RESET=True
  #     - ANONYMIZED_TELEMETRY=False
  #   healthcheck:
  #     disable: true

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    ports:
      - "8000:8000"  # Change back to 8000
    volumes:
      - ./data/chroma:/chroma/chroma_data
    environment:
      - ALLOW_RESET=True
      - ANONYMIZED_TELEMETRY=False
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/api/v2/heartbeat | grep 200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # neo4j:
  #   image: neo4j:5.13.0
  #   environment:
  #     - NEO4J_AUTH=neo4j/password
  #     - NEO4J_PLUGINS=["apoc"]
  #   volumes:
  #     - neo4j_data:/data
  #   ports:
  #     - "7474:7474"  # HTTP
  #     - "7687:7687"  # Bolt

  neo4j:
    # image: neo4j:5.13.0
    image: neo4j:5.13.0-community
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application services
  api:
    build:
      context: ../services/api
      dockerfile: Dockerfile
    # depends_on:
    #   duckdb-service:
    #     condition: service_healthy
    #   chroma:
    #     condition: service_healthy
    #   neo4j:
    #     condition: service_healthy
    depends_on:
      duckdb-service:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      chroma:
        condition: service_started

    ports:
      - "4000:4000"  # GraphQL API
    volumes:
      - ../conf:/app/conf
    environment:
      - DUCKDB_SERVICE_URL=http://duckdb-service:3000
      - CHROMA_SERVICE_URL=http://chroma:8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - LLM_SERVICE_URL=http://llm:5000
      - LOG_LEVEL=info

  processor:
    build:
      context: ../services/processor
      dockerfile: Dockerfile
    # depends_on:
    #   duckdb-service:
    #     condition: service_healthy
    #   chroma:
    #     condition: service_healthy
    #   neo4j:
    #     condition: service_healthy
    depends_on:
      duckdb-service:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      chroma:
        condition: service_started

    volumes:
      - ../data:/app/data
      - ../conf:/app/conf
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATA_DIR=/app/data
      - CACHE_DIR=/app/cache
      - NEO4J_PASSWORD=password
      - LOG_LEVEL=info

  llm:
    build:
      context: ../services/llm
      dockerfile: Dockerfile
    volumes:
      - ../models:/app/models
      - ../conf:/app/conf
    ports:
      - "5000:5000"  # LLM API
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models/llama3
      - ENABLE_MPS=true  # For Mac with Apple Silicon
      - ENABLE_CUDA=false  # Toggle for NVIDIA GPUs
      - LOG_LEVEL=info

  box-sync:
    build:
      context: ../services/box-sync
      dockerfile: Dockerfile
    volumes:
      - ../data:/app/data
      - ../conf:/app/conf
    environment:
      - BOX_FOLDER_ID=${BOX_FOLDER_ID:-0}
      - SYNC_INTERVAL_MINUTES=60
      - LOG_LEVEL=info

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"  # Web UI
    depends_on:
      - api
    environment:
      - API_URL=http://localhost:4000

volumes:
  duckdb_data:
  chroma_data:
  neo4j_data: